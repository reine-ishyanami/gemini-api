pub mod error;
pub mod request;
pub mod response;

use std::collections::BTreeMap;

use serde::{Deserialize, Serialize};

/// The base structured datatype containing multi-part content of a message.
/// A Content includes a role field designating the producer of the Content and a parts field containing multi-part data that contains the content of the message turn.
#[derive(Clone, Serialize, Deserialize)]
pub struct Content {
    /// Ordered Parts that constitute a single message. Parts may have different MIME types.
    pub parts: Vec<Part>,
    /// Optional. The producer of the content. Must be either 'user' or 'model'.
    /// Useful to set for multi-turn conversations, otherwise can be left blank or unset.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
}

#[derive(Clone, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "user")]
    User,
    #[serde(rename = "model")]
    Model,
}

/// A datatype containing media that is part of a multi-part Content message.
/// A Part consists of data which has an associated datatype. A Part can only contain one of the accepted types in Part.data.
/// A Part must have a fixed IANA MIME type identifying the type and subtype of the media if the inlineData field is filled with raw bytes.
#[derive(Clone, Deserialize, Serialize)]
pub enum Part {
    /// Inline text.
    #[serde(rename = "text")]
    Text(String),
    /// Inline media bytes.
    InlineData {
        /// The IANA standard MIME type of the source data. Examples: - image/png - image/jpeg If an unsupported MIME type is provided, an error will be returned.
        #[serde(rename = "mimeType")]
        mime_type: String,
        /// Raw bytes for media formats.
        /// A base64-encoded string.
        data: String,
    },
    /// A predicted FunctionCall returned from the model that contains a string representing the FunctionDeclaration.name with the arguments and their values.
    FunctionCall {
        /// Required. The name of the function to call. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 63.
        name: String,
        /// Optional. The function parameters and values in JSON object format.
        #[serde(skip_serializing_if = "Option::is_none")]
        args: Option<BTreeMap<String, serde_json::Value>>,
    },
    /// The result output of a FunctionCall that contains a string representing the FunctionDeclaration.name and a structured JSON object containing any output from the function is used as context to the model.
    FunctionResponse {
        /// Required. The name of the function to call. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 63.
        name: String,
        /// Required. The function response in JSON object format.
        response: BTreeMap<String, serde_json::Value>,
    },
    /// URI based data.
    FileData {
        /// Optional. The IANA standard MIME type of the source data.
        #[serde(skip_serializing_if = "Option::is_none", rename = "mimeType")]
        mime_type: Option<String>,
        /// Required. URI.
        #[serde(rename = "fileUri")]
        file_uri: String,
    },
    /// Code generated by the model that is meant to be executed.
    ExecutableCode {
        /// Required. Programming language of the code.
        language: Language,
        /// Required. The code to be executed.
        code: String,
    },
    /// Result of executing the ExecutableCode.
    CodeExecutionResult {
        /// Required. Outcome of the code execution.
        outcome: Outcome,
        /// Optional. Contains stdout when code execution is successful, stderr or other description otherwise.
        #[serde(skip_serializing_if = "Option::is_none")]
        output: Option<String>,
    },
}

/// Supported programming languages for the generated code.
#[derive(Clone, Serialize, Deserialize)]
pub enum Language {
    /// Unspecified language. This value should not be used.
    #[serde(rename = "LANGUAGE_UNSPECIFIED")]
    LanguageUnspecified,
    /// Python >= 3.10, with numpy and simpy available.
    #[serde(rename = "PYTHON")]
    Python,
}

/// Enumeration of possible outcomes of the code execution.
#[derive(Clone, Serialize, Deserialize)]
pub enum Outcome {
    /// Unspecified status. This value should not be used.
    #[serde(rename = "OUTCOME_UNSPECIFIED")]
    OutcomeUnspecified,
    /// Code execution completed successfully.
    #[serde(rename = "OUTCOME_OK")]
    OutcomeOk,
    /// Code execution finished but with a failure. stderr should contain the reason.
    #[serde(rename = "OUTCOME_FAILED")]
    OutcomeFailed,
    /// Code execution ran for too long, and was cancelled. There may or may not be a partial output present.
    #[serde(rename = "OUTCOME_DEADLINE_EXCEEDED")]
    OutcomeDeadlineExceeded,
}
